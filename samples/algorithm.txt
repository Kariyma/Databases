0. Подготавливаюем таблицу со случайными данными для тестирвания.
1. Создаём временную таблицу с задачами подлежащими оптимизации. Выборка заданным условиям.
2. Считаем оптимальный диапазон нагрузки заданных исполнителе.
    Всего задач подлежащих оптимизации / всего реальных (из заданного списка, которые реально есть в выборке)
    Получанное среднее значение приводим к min и max значению нагрузки на одного исполнителя. При этом max - min = 1
3. Создаём временную таблицу оптимизации.
    Список задач у исполнителя
    Исполнител
    Всего задач у усполнителя
    Минимальная нагрузка (константа из предыдущего пункта, нужа для расчёта других столбцов)
    Флаг оптимальная нагрузка у исполнителя или нет
    Правка обязательная. Добавить задачи + число, убрать задачи - число.
    Првка не обязательная. +1 или -1. Нужна для дальнейших расчётов.
    Таблицу сортируем   1. Флаг оптимальности, по возрастанию, от 0 до 1
                        2. Правки обязательные, по возрастанию, от - до +
                        3. Правки общее число задач, по убыванию
4. Нормализация таблицы оптимизации.
    Проверяем нормализована ли таблица - в целом по всем исполнителям количество задач, которые нужно убрать должно
    быть равно количеству задач, которые нужно добавить - сумма по полю "правка обязательная" должна быть равна нулю.
    Если таблица оптимизации не нормализована. Вносим изменения (UPDATE) для первых записей в количестве равном
    сумме по модулю поля "правка обязательна". К обязательной правке добавляем дополнительно возможные правки
    (+1 или -1) из соответсвующего поля.
5. Формируем массив перераспределения задач.
    Выбираем из таблицы оптимизации строки требующие правки (флаг оптимальности 0):
    Список ключей задач
    Исполнитель
    Обязательная правка
    Цикл по каждой строке
        цикл по число правок необходимых данному исполнителю
            Проверяем отрицательная правка или положительная. Так как таблица отсортированная в начале всегда идут
            отрицательные правки.
            Для отрицательной правки:
                Во временный массив TASK помещаем крайний ключ задачи (ключ массива 'key')
                Во временный массив TASK поммещаем код исполнителя задачи по текущей строке (ключ массива 'assignee_old')
                Добавляема массив TASK в список TASK_DEL
            Для положительной правки:
                Из списка TASK_DEL берём верхний массив TASK.
                В массив TASK помещаем код исполтителя по текущей строке (ключ массива 'assignee_new')
                Добавляем полученный массив TASK в список TASK_UPDATE
6. Вносим изменеия в таблицу с заданиями подлежащими оптимизации.
    Проходим циклом по списку пререраспределя TASK_UPDATE. И для каждого массива в этом списке выполняем UPDATE таблицы.
    По ключу задаче присваваем нового исполнителя (старый код исполнителя навсякий случай сохраняется в поле assignee_old)
7. Получаем искомую выборку задач с новыми исполнителями. Формируем данные в требуемом формате.
